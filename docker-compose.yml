services:
  core-api:
    restart: always
    build:
      context: ./core-api
      dockerfile: Dockerfile
      args:
        ACTIVE_PROFILE: local
        FULL_TEST: false
    environment:
      SPRING_PROFILES_ACTIVE: local
      TZ: Asia/Seoul
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - core-api-log:/app/logs
    ports:
      - "8080:8080"
    networks:
      - internal-net

  postgres:
    image: postgres:17-alpine
    restart: always
    networks:
      internal-net:
        aliases:
          - postgres
    expose:
      - "5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: prototype
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql:ro

  redis:
    image: redis:8.0.1-alpine
    restart: always
    networks:
      internal-net:
        aliases:
          - redis
    expose:
      - "6379"
    volumes:
      - redis-data:/data
    command: "redis-server"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.125"
          memory: 128M

  mongo:
    image: mongo:6.0
    restart: always
    networks:
      internal-net:
        aliases:
          - mongo
    expose:
      - "27017"
    environment:
      # 초기 DB 이름과 관리자 계정
      MONGO_INITDB_DATABASE: prototype
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      # 데이터 영속화
      - mongo-data:/data/db
      # 컨테이너 시작 시 실행될 초기화 스크립트
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  rag-service:
    build:
      context: ./rag-service
      dockerfile: Dockerfile
    restart: always
    networks:
      internal-net:
        aliases:
          - rag-service
    expose:
      - "5000"
    environment:
      # 필요하다면 API 키, 모델명, 환경 변수 등
      LLM_API_BASE: "http://llm-server:11434"
      TOKENIZERS_PARALLELISM: false
    healthcheck:
      test: http://localhost:5000/health
    depends_on:
      - llm-server
    volumes:
      - rag-service-log:/app/logs
      - huggingface-cache:/root/.cache/huggingface/hub

  llm-server:
    build:
      context: .
      dockerfile: Dockerfile.llm-server
    restart: always
    networks:
      internal-net:
        aliases:
          - llm-server
    expose:
      - "11434"
    volumes:
      - ollama-data:/root/.ollama


  indexing-service:
    build:
      context: ./indexing-service
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      internal-net:
        aliases:
          - indexing-service
    expose:
      - "5001"
    volumes:
      - indexing-service-log:/app/logs
      - huggingface-cache:/root/.cache/huggingface/hub

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: always
    ports:
      - "80:80" # Expose Nginx port
    networks:
      - internal-net
    depends_on:
      - core-api # Client depends on core-api for API calls

networks:
  internal-net:
    driver: bridge

volumes:
  core-api-log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/rag-chatbot-prototype/logs/core-api
  rag-service-log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/rag-chatbot-prototype/logs/rag-service
  indexing-service-log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/rag-chatbot-prototype/logs/indexing-service

  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/rag-chatbot-prototype/redis/data
  pg-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/rag-chatbot-prototype/pg/data
  mongo-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/rag-chatbot-prototype/mongo/data

  ollama-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/rag-chatbot-prototype/ollama/data

  huggingface-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/rag-chatbot-prototype/huggingface/cache

  documents:
