services:
  core-api:
    restart: always
    build:
      context: ./core-api
      dockerfile: Dockerfile
      args:
        ACTIVE_PROFILE: local
    environment:
      SPRING_PROFILES_ACTIVE: local
      TZ: Asia/Seoul
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - core-api-log:/app/logs
      - documents:/app/documents
    ports:
      - "8080:8080"
    networks:
      - internal-net
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_started


  postgres:
    image: postgres:17-alpine
    restart: always
    networks:
      internal-net:
        aliases:
          - postgres
    expose:
      - "5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: prototype
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d prototype"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:8.0.1-alpine
    restart: always
    networks:
      internal-net:
        aliases:
          - redis
    expose:
      - "6379"
    volumes:
      - redis-data:/data
    command: "redis-server"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          cpus: "0.125"
          memory: 128M

  mongo:
    image: mongo:6.0
    restart: always
    networks:
      internal-net:
        aliases:
          - mongo
    expose:
      - "27017"
    environment:
      # 초기 DB 이름과 관리자 계정
      MONGO_INITDB_DATABASE: prototype
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  rag-service:
    build:
      context: ./rag-service
      dockerfile: Dockerfile
    restart: always
    networks:
      internal-net:
        aliases:
          - rag-service
    expose:
      - "8000"
    environment:
      # API keys, model names, environment variables, etc. if needed
      # LLM_API_BASE: "http://llm-server:11434"
      LLM_API_BASE: "http://host.docker.internal:11434"
      TOKENIZERS_PARALLELISM: false
      REDIS_HOST: redis
      CACHE_FOLDER: ${CACHE_FOLDER}
#    depends_on:
#      - llm-server
    volumes:
      - rag-service-log:/app/logs
      - huggingface-cache:${CACHE_FOLDER}
      - documents:/app/documents
      - vector-store:/app/vector-store

#  llm-server:
#    build:
#      context: .
#      dockerfile: Dockerfile.llm-server
#    restart: always
#    networks:
#      internal-net:
#        aliases:
#          - llm-server
#    expose:
#      - "11434"
#    volumes:
#      - ollama-data:/root/.ollama


  indexing-service:
    build:
      context: ./indexing-service
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      internal-net:
        aliases:
          - indexing-service
    expose:
      - "8001"
    environment:
      REDIS_HOST: redis
      CACHE_FOLDER: ${CACHE_FOLDER}
    volumes:
      - indexing-service-log:/app/logs
      - huggingface-cache:${CACHE_FOLDER}
      - documents:/app/documents
      - vector-store:/app/vector-store

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: always
    ports:
      - "5173:80" # Expose Nginx port
    networks:
      - internal-net
    depends_on:
      - core-api # Client depends on core-api for API calls

networks:
  internal-net:
    driver: bridge

volumes:
  core-api-log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_ROOT}/logs/core-api
  rag-service-log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_ROOT}/logs/rag-service
  indexing-service-log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_ROOT}/logs/indexing-service

  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_ROOT}/redis/data
  pg-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_ROOT}/pg/data
  mongo-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_ROOT}/mongo/data

#  ollama-data:
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: ${VOLUME_ROOT}/ollama/data

  huggingface-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CACHE_FOLDER}

  documents:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_ROOT}/documents

  vector-store:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VOLUME_ROOT}/vector-store
